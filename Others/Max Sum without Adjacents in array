
  int findMaxSum(int *arr, int n) {
	    //recursive solution
	    if(n == 1){
	        return arr[0];
	    }
	    else if(n == 2){
	        return max(arr[0], arr[1]);
	    }
	    else{
	        return max(findMaxSum(arr, n - 1), findMaxSum(arr, n - 2) + arr[n-1]);          //recursive o(2^n) 
	    }
	}
	
   int dp[1000001];
   int solve(int* nums ,int n)
   {
       if(n<=-1)
           return 0;
       if(dp[n]!=-1)
           return dp[n];
       
       int op1=nums[n-1]+solve(nums,n-2);
       int op2=solve(nums,n-1);
       
       return dp[n]=max(op1,op2);
   }
// calculate the maximum sum with out adjacent                                //using memoization time=o(n)  space=o(n)
    int findMaxSum(int *arr, int n) {
    // code here
        memset(dp,-1,sizeof(dp));
       return solve(arr,n);
   }
   
   
   int findMaxSum(int *arr, int n) {
    //dynamic programming solution
    int dp[n];
    dp[0] = arr[0];
    dp[1] = max(arr[0], arr[1]);
    for(int i = 2; i < n; i++){
        dp[i] = max(dp[i - 1], arr[i] + dp[i - 2]);                   //using dp time=o(n)  space=o(n)
    }
    return dp[n-1];
  }
  
  //As we need only the last and second last entry to calculate value for any index, we don't need to have whole dp array instead we can use two variables only
  //Space Optimised

	int findMaxSum(int *arr, int n) {
	    //dynamic programming solution
	    if(n == 1){
	        return arr[0];
	    }
	    if(n == 2){
	        return max(arr[0], arr[1]);
	    }
	    int first = arr[0];
	    int second = max(arr[0], arr[1]);
	    int curr = 0;
	    for(int i = 2; i < n; i++){
	        curr = max(first + arr[i], second);          time=o(n)  space=o(1)
	        first = second;
	        second = curr;
	    }
	    return curr;
	}
