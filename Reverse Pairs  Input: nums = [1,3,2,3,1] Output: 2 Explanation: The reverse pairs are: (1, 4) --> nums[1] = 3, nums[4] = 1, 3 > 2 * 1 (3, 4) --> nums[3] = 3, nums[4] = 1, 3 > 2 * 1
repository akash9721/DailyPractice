Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1




class Solution {
    public static int merge(int[] nums,int start,int end,int mid){
        int cnt=0;
        int j=mid+1;
        for(int i=start;i<=mid;i++){
            while(j<=end && nums[i]>(2*(long )nums[j])){
                j++;
            }
            cnt+=(j-(mid+1));
        }

        ArrayList<Integer> temp=new ArrayList();
        int left=start;
        int right=mid+1;
        while(left<=mid && right<=end){
            if(nums[left]<=nums[right]){
                temp.add(nums[left++]);
            }
            else{
                temp.add(nums[right++]);
            }
        }
        while(left<=mid){
            temp.add(nums[left++]);
        }
        while(right<=end){
            temp.add(nums[right++]);
        }

        for(int i=start;i<=end;i++){
            nums[i]=temp.get(i-start);
        }
        return cnt;
    }
    public static int mergerSort(int[] nums,int start,int end){
        if(start>=end)
          return 0;
        int mid=(start+end)/2;  
        int inv=mergerSort(nums,start,mid);
        inv+=mergerSort(nums,mid+1,end);
        inv+=merge(nums,start,end,mid);
        return inv;  
    }
    public int reversePairs(int[] nums) {
        return mergerSort(nums,0,nums.length-1);
    }
}
