    int findBottomLeftValue(TreeNode* root) {
        int ans=0;
        if(root==NULL)
            return{};
        queue<TreeNode*> q;
        q.push(root);
        while(q.empty()==false)
        {
            int si=q.size();
            for(int i=0;i<si;i++)
            {
                TreeNode*curr=q.front();
                q.pop();
                if(i==0)
                {
                    ans=curr->val;
                }
                if(curr->left)
                    q.push(curr->left);
                if(curr->right)
                    q.push(curr->right);
            }
        }
        return ans;
        
    }
    
    
    
    
    
    
    
    
    
    +++++++++++++++++++++++++++++++++++++java++++++++++++++++++++++++++++++++++++++++++++
    
    public int findBottomLeftValue(TreeNode root) {
        int ans=0;
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int n=q.size();
            for(int i=0;i<n;i++){
                TreeNode curr=q.peek();
                q.remove();
                if(i==0){
                    ans=curr.val;
                }
                if(curr.left!=null){
                    q.add(curr.left);
                }
                if(curr.right!=null){
                    q.add(curr.right);
                }
            }
        }
        return ans;
    }
